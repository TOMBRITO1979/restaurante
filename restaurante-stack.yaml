version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: restaurante
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  backend:
    image: tomautomations/restaurante-backend:latest
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/restaurante?schema=public
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_SECURE: ${SMTP_SECURE}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      NODE_ENV: production
      PORT: 3000
      FRONTEND_URL: https://${FRONTEND_DOMAIN}
    networks:
      - network_public
      - internal
    depends_on:
      - postgres
    deploy:
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=network_public
        - traefik.http.routers.restaurante-backend.rule=Host(`${BACKEND_DOMAIN}`)
        - traefik.http.routers.restaurante-backend.entrypoints=websecure
        - traefik.http.routers.restaurante-backend.tls.certresolver=letsencrypt
        - traefik.http.services.restaurante-backend.loadbalancer.server.port=3000
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  frontend:
    image: tomautomations/restaurante-frontend:latest
    networks:
      - network_public
    depends_on:
      - backend
    deploy:
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=network_public
        - traefik.http.routers.restaurante-frontend.rule=Host(`${FRONTEND_DOMAIN}`)
        - traefik.http.routers.restaurante-frontend.entrypoints=websecure
        - traefik.http.routers.restaurante-frontend.tls.certresolver=letsencrypt
        - traefik.http.services.restaurante-frontend.loadbalancer.server.port=80
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

networks:
  network_public:
    external: true
  internal:
    driver: overlay

volumes:
  postgres_data:
