version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: restaurante
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
    volumes:
      - restaurante_restaurante_postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY_ID:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_ACCESS_KEY:-minioadmin}
    volumes:
      - restaurante_minio_data:/data
    networks:
      - internal
      - network_public
    deploy:
      replicas: 1
      labels:
        # MinIO API
        - traefik.enable=true
        - traefik.docker.network=network_public
        - traefik.http.routers.restaurante-minio-api.rule=Host(`minio-api.${BACKEND_DOMAIN}`)
        - traefik.http.routers.restaurante-minio-api.entrypoints=websecure
        - traefik.http.routers.restaurante-minio-api.tls.certresolver=letsencrypt
        - traefik.http.routers.restaurante-minio-api.service=restaurante-minio-api
        - traefik.http.services.restaurante-minio-api.loadbalancer.server.port=9000
        # MinIO Console
        - traefik.http.routers.restaurante-minio-console.rule=Host(`minio.${BACKEND_DOMAIN}`)
        - traefik.http.routers.restaurante-minio-console.entrypoints=websecure
        - traefik.http.routers.restaurante-minio-console.tls.certresolver=letsencrypt
        - traefik.http.routers.restaurante-minio-console.service=restaurante-minio-console
        - traefik.http.services.restaurante-minio-console.loadbalancer.server.port=9001
      restart_policy:
        condition: on-failure

  backend:
    image: r.chatwell.pro/restaurante-backend:latest
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/restaurante?schema=public

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d

      # Storage Provider (minio for this stack)
      STORAGE_PROVIDER: minio

      # MinIO Configuration
      S3_ENDPOINT: https://minio-api.${BACKEND_DOMAIN}
      S3_REGION: us-east-1
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID:-minioadmin}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY:-minioadmin}
      S3_BUCKET: ${S3_BUCKET:-restaurante-uploads}
      S3_FORCE_PATH_STYLE: true

      # SMTP
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_SECURE: ${SMTP_SECURE:-false}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}

      # Application
      NODE_ENV: production
      PORT: 3000
      FRONTEND_URL: ${FRONTEND_URL}
    networks:
      - network_public
      - internal
    depends_on:
      - postgres
      - minio
    deploy:
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=network_public
        - traefik.http.routers.restaurante-backend.rule=Host(`${BACKEND_DOMAIN}`)
        - traefik.http.routers.restaurante-backend.entrypoints=websecure
        - traefik.http.routers.restaurante-backend.tls.certresolver=letsencrypt
        - traefik.http.services.restaurante-backend.loadbalancer.server.port=3000
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

  frontend:
    image: r.chatwell.pro/restaurante-frontend:latest
    environment:
      VITE_API_URL: https://${BACKEND_DOMAIN}
    networks:
      - network_public
    depends_on:
      - backend
    deploy:
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=network_public
        - traefik.http.routers.restaurante-frontend.rule=Host(`${FRONTEND_DOMAIN}`)
        - traefik.http.routers.restaurante-frontend.entrypoints=websecure
        - traefik.http.routers.restaurante-frontend.tls.certresolver=letsencrypt
        - traefik.http.services.restaurante-frontend.loadbalancer.server.port=80
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first

networks:
  network_public:
    external: true
  internal:
    driver: overlay

volumes:
  restaurante_restaurante_postgres_data:
    external: true
  restaurante_minio_data:
    driver: local
